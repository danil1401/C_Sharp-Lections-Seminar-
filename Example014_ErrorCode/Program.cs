Console.Clear();

int a = -5;
int b = 5;

Console.WriteLine($"{a}..{b}");

/*ПЛАВИЛА УЛУЧШЕНИЯ КОДА
-Код читается больше чем пишется, не нужно экономить на понятности и чистоте ради скорости.

-Стараться не спользовать сокращения кроме общепринятых в разарбатываемом продукте.

-Когда придумываем названия для общедоступной единицы, стараться не использовать имена, потенциально
или явно конфликтующие со стандартными идентификаторами.

-Использовать имена спростым написание. Их проще читать и набирать. Избегать использование слов с двойными буквами, сложным чередованием согласных.

-Никогда не использовать матерные слова в коде и в комментариях.

- Не использовать Акронимы, которые не являются широко принятыми, и в целом используется акронимы только при необходимости-SendPM(int i, stirng t)
точно хуже, чем SendPrivateMessage(int id, string text)

-Используйте универсальные имена платформы, не относящееся к конкретному языку: ConvertToByte(string value); против ConvertToUsingnedChar(string value)

-Используйте общие, не привязанные к контексту имена, когда это нужно: ConvertToByte(string value); лучше чем ConvertToByte(string str)

-Именование методов, аргументов, переменных и других системные единиц отличается.

-Нотации: (стили написания)
--Pascal – указание этого стиля оформления идентификатора обозначает, что
первая буква заглавная и все последующие первые буквы слов тоже заглавные.
Например: BackColor, LastModified, DateTime.
--Camel – указание этого стиля обозначает, что первая буква строчная, а остальные
первые буквы слов заглавные.
Например: borderColor, accessTime, templateName.

-Избегайте длинных строк, переносите инструкцию на новую строку.
    Не размещайте несколько инструкций на одной строке.
        Каждая инструкция должна начинаться с новой строки.
            При разбивке длинных выражений на несколько строк,
            оставляйте операторы на новой строке (пример ниже).

-Используйте автоформатирование кода вашей IDE после модификации кода.

-После написания кода прочитать его на русском
bool Metodi(int chislo)// Некоторый метод который называется методы, и  в качестве аргумента принимающий число, называется число(или имя аргумента=число)
{
 bool resultati = false; // телом метода является логическая переменная результаты, которой изначально присвоено значение лжи
 if (chislo % 2 == 0) { resultati = true; } // производится следующая проверка-если остаток от деления входного числа на 2 равен нулю, 
 значение переменной результаты  становится истинной
 else { resultati = false; }// иначе значения переменной результаты становятся ложью
 if (resultati == false) { return false; }// дальше производится проверка, если результаты ложные, метод должен вернуть ложь
 else { return true; }// иначе метод должен вернуть истину
}
-Идеальный вариант кода который выше с корректными наименованиями
bool IsEven(int value)
{
 return value % 2 == 0;
}

-Ещё про bool
Не используйте проверки вида b == false.
Вместо этого используйте !b

- Красивый код: какой он?
● Для методов используйте нотацию Pascal (вне зависимости от
области видимости метода)
 GetStream()
● Если метод асинхронный - он заканчивается на "Async"
 GetStreamAsync()

-Для именования переменных используйте нотацию Camel.
● Используйте неявную типизацию (var) для локальных переменных
в случаях, когда тип переменной понятен из правой части
назначения или когда точный тип не важен.

-Объявляйте переменные непосредственно перед
их использованием.

-Счетчики в циклах i, j, k, l, m, n, если этого не требует условие. Не нужно выдумывать непонятных

- Инициализируйте переменные при объявлении, если есть такая возможность.
*/
